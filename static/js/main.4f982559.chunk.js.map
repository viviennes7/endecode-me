{"version":3,"sources":["components/header/Header.js","components/input/Input.js","components/output/ConvertStrategy.js","components/output/Output.js","components/body/Body.js","components/app/App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","Component","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEncodeClick","onClickButton","onDecodeClick","Button_default","variant","onClick","InputGroup_default","FormControl_default","as","style","height","value","inputValue","onChange","setInputValue","NOT_SUPPORT","ENCODING_STRATEGY","Base64","base64","encode","URL","encodeURIComponent","MD5","md5","SHA256","sha256","SHA512","sha512","DECODING_STRATEGY","decode","decodeURIComponent","Output","copyToClipboard","event","target","currentTarget","select","document","execCommand","showTooltip","outputValue","name","React","createRef","state","result","onRef","undefined","convertType","input","setState","e","tooltip","current","ReactTooltip","show","ref","readOnly","data-tip","data-event","dist_default","place","globalEventOff","type","delayHide","effect","ALGORITHMS","Body","forEach","algorithm","output","convertValue","_this2","Input_Input","map","Output_Output","key","App","Header_Header","Body_Body","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4f982559.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport logo from '../../logo.svg'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Header\">\r\n                <img className=\"logo\" src={logo} alt='endecode Me'/>\r\n                <h2 className=\"Title\">endeCode Me</h2>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './Input.css'\r\nimport Button from 'react-bootstrap/lib/Button';\r\nimport InputGroup from 'react-bootstrap/lib/InputGroup';\r\nimport FormControl from 'react-bootstrap/lib/FormControl';\r\n\r\nexport default class Input extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onEncodeClick = () => {\r\n        this.props.onClickButton('encode');\r\n    };\r\n\r\n    onDecodeClick = () => {\r\n        this.props.onClickButton('decode');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='input-wrapper'>\r\n                <div className='button-wrapper'>\r\n                    <Button variant=\"dark\" className='input-button' onClick={this.onEncodeClick}>\r\n                        Encode\r\n                    </Button>\r\n                    <Button variant=\"dark\" className='input-button' onClick={this.onDecodeClick}>\r\n                        Decode\r\n                    </Button>\r\n                </div>\r\n                <InputGroup>\r\n                    <FormControl as=\"textarea\"\r\n                                 style = {{height: 500}}\r\n                                 value={this.props.inputValue}\r\n                                 onChange={this.props.setInputValue}/>\r\n                </InputGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import base64 from 'base64-utf8'\r\nimport md5 from 'md5/md5';\r\nimport sha256 from 'sha256'\r\nimport SHA512 from 'js-sha512';\r\n\r\nexport const NOT_SUPPORT = 'Not Support';\r\nexport const ENCODING_STRATEGY = {\r\n    Base64: (value) => base64.encode(value),\r\n    URL: (value) => encodeURIComponent(value),\r\n    MD5: (value) => md5(value),\r\n    SHA256: (value) => sha256(value),\r\n    SHA512: (value) => SHA512.sha512(value),\r\n};\r\nexport const DECODING_STRATEGY = {\r\n    Base64: (value) => base64.decode(value),\r\n    URL: (value) => decodeURIComponent(value),\r\n    MD5: () => NOT_SUPPORT,\r\n    SHA256: () => NOT_SUPPORT,\r\n    SHA512: () => NOT_SUPPORT\r\n};\r\n","import React, {Component} from 'react';\r\nimport './Output.css';\r\nimport InputGroup from 'react-bootstrap/lib/InputGroup';\r\nimport FormControl from 'react-bootstrap/lib/FormControl';\r\nimport ReactTooltip from 'react-tooltip'\r\nimport {ENCODING_STRATEGY, DECODING_STRATEGY, NOT_SUPPORT} from \"./ConvertStrategy\";\r\n\r\nexport default class Output extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.outputValue = {};\r\n        this.outputValue[this.props.name] = React.createRef();\r\n        this.state = {result: ''};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRef(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onRef(undefined);\r\n    }\r\n\r\n    convertValue(convertType) {\r\n        let input = this.props.inputValue;\r\n        let result = convertType === 'encode' ?\r\n            this.encode(input) : this.decode(input);\r\n\r\n        this.setState({result});\r\n    }\r\n\r\n    encode(input) {\r\n        let result = '';\r\n        try {\r\n            result = ENCODING_STRATEGY[this.props.name](input);\r\n        } catch (e) {\r\n            result = NOT_SUPPORT;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    decode(input) {\r\n        let result = '';\r\n        try {\r\n            result = DECODING_STRATEGY[this.props.name](input);\r\n        } catch (e) {\r\n            result = NOT_SUPPORT;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    copyToClipboard = (event) => {\r\n        let value = event.target.value;\r\n        if (value && value!== NOT_SUPPORT) {\r\n            event.currentTarget.select();\r\n            document.execCommand(\"copy\");\r\n            this.showTooltip();\r\n        }\r\n    };\r\n\r\n    showTooltip() {\r\n        let tooltip = this.outputValue[this.props.name].current;\r\n        ReactTooltip.show(tooltip);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='output-wrapper'>\r\n                <div className='output-title'>{this.props.name}</div>\r\n                <InputGroup>\r\n                    <FormControl ref={this.outputValue[this.props.name]}\r\n                                 className='output-value'\r\n                                 value={this.state.result}\r\n                                 onClick={this.copyToClipboard}\r\n                                 readOnly={true}\r\n                                 data-tip=\"Copied\"\r\n                                 data-event='{click focus}'\r\n                                 as=\"textarea\">\r\n                    </FormControl>\r\n                </InputGroup>\r\n                <ReactTooltip place=\"bottom\"\r\n                              globalEventOff='click'\r\n                              type=\"dark\"\r\n                              delayHide={1000}\r\n                              effect='float'/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './Body.css'\r\nimport Input from \"../input/Input\";\r\nimport Output from \"../output/Output\";\r\n\r\nconst ALGORITHMS = ['Base64', 'URL', 'MD5', 'SHA256', 'SHA512'];\r\n\r\nexport default class Body extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {inputValue: ''};\r\n        this.output = {};\r\n    }\r\n\r\n    onClickButton = (convertType) => {\r\n        ALGORITHMS.forEach(algorithm =>\r\n            this.output[algorithm].convertValue(convertType)\r\n        );\r\n    };\r\n\r\n    setInputValue = (event) => {\r\n        let inputValue = event.target.value;\r\n        this.setState({inputValue});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='Body'>\r\n                <div className='Input'>\r\n                    <Input setInputValue={this.setInputValue}\r\n                           onClickButton={this.onClickButton}/>\r\n                </div>\r\n                <div className='Output'>\r\n                    <div className='output-space'/>\r\n                    {\r\n                        ALGORITHMS.map((algorithm) =>\r\n                            <Output inputValue={this.state.inputValue}\r\n                                    onRef={ref => (this.output[algorithm] = ref)}\r\n                                    name={algorithm}\r\n                                    key={algorithm}/>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Header from \"../header/Header\";\r\nimport Body from '../body/Body';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Body/>\r\n            </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}