{"version":3,"sources":["components/header/Header.js","components/input/Input.js","components/output/ConvertStrategy.js","components/output/Output.js","components/body/Body.js","components/app/App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","Component","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEncodeClick","onClickButton","onDecodeClick","Button_default","variant","onClick","InputGroup_default","FormControl_default","as","style","height","value","inputValue","onChange","setInputValue","NOT_SUPPORT","ENCODING_STRATEGY","Base64","base64","encode","URL","encodeURIComponent","MD5","md5","SHA256","sha256","SHA512","sha512","DECODING_STRATEGY","decode","decodeURIComponent","Output","copyToClipboard","event","target","currentTarget","select","document","execCommand","showTooltip","outputValue","name","React","createRef","state","result","onRef","undefined","convertType","input","setState","e","tooltip","current","ReactTooltip","show","ref","readOnly","data-tip","data-event","dist_default","place","globalEventOff","type","delayHide","effect","ALGORITHMS","Body","forEach","algorithm","output","convertValue","_this2","Input_Input","map","Output_Output","key","App","Header_Header","Body_Body","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.72445bb4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.css';\nimport logo from '../../logo.svg'\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <img className=\"logo\" src={logo} alt='endecode Me'/>\n                <h2 className=\"Title\">endeCode Me</h2>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './Input.css'\nimport Button from 'react-bootstrap/lib/Button';\nimport InputGroup from 'react-bootstrap/lib/InputGroup';\nimport FormControl from 'react-bootstrap/lib/FormControl';\n\nexport default class Input extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onEncodeClick = () => {\n        this.props.onClickButton('encode');\n    };\n\n    onDecodeClick = () => {\n        this.props.onClickButton('decode');\n    };\n\n    render() {\n        return (\n            <div className='input-wrapper'>\n                <div className='button-wrapper'>\n                    <Button variant=\"dark\" className='input-button' onClick={this.onEncodeClick}>\n                        Encode\n                    </Button>\n                    <Button variant=\"dark\" className='input-button' onClick={this.onDecodeClick}>\n                        Decode\n                    </Button>\n                </div>\n                <InputGroup>\n                    <FormControl as=\"textarea\"\n                                 style = {{height: 500}}\n                                 value={this.props.inputValue}\n                                 onChange={this.props.setInputValue}/>\n                </InputGroup>\n            </div>\n        )\n    }\n}\n\n","import base64 from 'base64-utf8'\nimport md5 from 'md5/md5';\nimport sha256 from 'sha256'\nimport SHA512 from 'js-sha512';\n\nexport const NOT_SUPPORT = 'Not Support';\nexport const ENCODING_STRATEGY = {\n    Base64: (value) => base64.encode(value),\n    URL: (value) => encodeURIComponent(value),\n    MD5: (value) => md5(value),\n    SHA256: (value) => sha256(value),\n    SHA512: (value) => SHA512.sha512(value),\n};\nexport const DECODING_STRATEGY = {\n    Base64: (value) => base64.decode(value),\n    URL: (value) => decodeURIComponent(value),\n    MD5: () => NOT_SUPPORT,\n    SHA256: () => NOT_SUPPORT,\n    SHA512: () => NOT_SUPPORT\n};\n","import React, {Component} from 'react';\nimport './Output.css';\nimport InputGroup from 'react-bootstrap/lib/InputGroup';\nimport FormControl from 'react-bootstrap/lib/FormControl';\nimport ReactTooltip from 'react-tooltip'\nimport {ENCODING_STRATEGY, DECODING_STRATEGY, NOT_SUPPORT} from \"./ConvertStrategy\";\n\nexport default class Output extends Component {\n    constructor(props) {\n        super(props);\n        this.outputValue = {};\n        this.outputValue[this.props.name] = React.createRef();\n        this.state = {result: ''};\n    }\n\n    componentDidMount() {\n        this.props.onRef(this);\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    convertValue(convertType) {\n        let input = this.props.inputValue;\n        let result = convertType === 'encode' ?\n            this.encode(input) : this.decode(input);\n\n        this.setState({result});\n    }\n\n    encode(input) {\n        let result = '';\n        try {\n            result = ENCODING_STRATEGY[this.props.name](input);\n        } catch (e) {\n            result = NOT_SUPPORT;\n        }\n        return result;\n    }\n\n    decode(input) {\n        let result = '';\n        try {\n            result = DECODING_STRATEGY[this.props.name](input);\n        } catch (e) {\n            result = NOT_SUPPORT;\n        }\n        return result;\n    }\n\n    copyToClipboard = (event) => {\n        let value = event.target.value;\n        if (value && value!== NOT_SUPPORT) {\n            event.currentTarget.select();\n            document.execCommand(\"copy\");\n            this.showTooltip();\n        }\n    };\n\n    showTooltip() {\n        let tooltip = this.outputValue[this.props.name].current;\n        ReactTooltip.show(tooltip);\n    }\n\n    render() {\n        return (\n            <div className='output-wrapper'>\n                <div className='output-title'>{this.props.name}</div>\n                <InputGroup>\n                    <FormControl ref={this.outputValue[this.props.name]}\n                                 className='output-value'\n                                 value={this.state.result}\n                                 onClick={this.copyToClipboard}\n                                 readOnly={true}\n                                 data-tip=\"Copied\"\n                                 data-event='{click focus}'\n                                 as=\"textarea\">\n                    </FormControl>\n                </InputGroup>\n                <ReactTooltip place=\"bottom\"\n                              globalEventOff='click'\n                              type=\"dark\"\n                              delayHide={1000}\n                              effect='float'/>\n            </div>\n\n        )\n    }\n}","import React, {Component} from 'react';\nimport './Body.css'\nimport Input from \"../input/Input\";\nimport Output from \"../output/Output\";\n\nconst ALGORITHMS = ['Base64', 'URL', 'MD5', 'SHA256', 'SHA512'];\n\nexport default class Body extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {inputValue: ''};\n        this.output = {};\n    }\n\n    onClickButton = (convertType) => {\n        ALGORITHMS.forEach(algorithm =>\n            this.output[algorithm].convertValue(convertType)\n        );\n    };\n\n    setInputValue = (event) => {\n        let inputValue = event.target.value;\n        this.setState({inputValue});\n    };\n\n    render() {\n        return (\n            <div className='Body'>\n                <div className='Input'>\n                    <Input setInputValue={this.setInputValue}\n                           onClickButton={this.onClickButton}/>\n                </div>\n                <div className='Output'>\n                    <div className='output-space'/>\n                    {\n                        ALGORITHMS.map((algorithm) =>\n                            <Output inputValue={this.state.inputValue}\n                                    onRef={ref => (this.output[algorithm] = ref)}\n                                    name={algorithm}\n                                    key={algorithm}/>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Header from \"../header/Header\";\nimport Body from '../body/Body';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <Header/>\n                <Body/>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}